# -----------------------------------------------------------------------------
# Zsh start profiler
#
# PS4=$'\\\011%D{%s.%6.}\011%x\011%I\011%N\011%e\011'
# exec 3>&2 2>$HOME/tmp/zshstart.$$.log
# setopt xtrace prompt_subst
# -----------------------------------------------------------------------------

# shortcut to this dotfiles path is $ZSH
export ZSH=$HOME/.dotfiles

export BREW_PREFIX=$(brew --prefix)

# your project folder that we can `c [tab]` to
export PROJECTS=~/Code

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

# all of our zsh files
typeset -U config_files
config_files=($ZSH/*/*.zsh)

# load path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

[[ $- != *i* ]] && return

# load plugins
# TODO: Move plugins loader to $ZSH/plugins
# IDEA: add loaders in addition to path, completion, etc
#source $ZSH/plugins/alias-tips/alias-tips.plugin.zsh
#export ZSH_PLUGINS_ALIAS_TIPS_TEXT="ðŸ’¡ Alias tip: "

# -----------------------------------------------------------------------------
# COMPLETION #
# -----------------------------------------------------------------------------
zmodload -i zsh/complist
zmodload -i zsh/compctl
zmodload -i zsh/computil
zmodload -i zsh/zle

zstyle :compinstall filename '/Users/seenkoo/.dotfiles/zsh/zshrc.symlink'
# Magically quote urls
autoload -U url-quote-magic

autoload -U compinit
compinit -u
autoload -Uz zrecompile


# load completions after compinit
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done
unset config_files

autoload -Uz $ZSH/functions/([^_]*)(:t)

zle -N self-insert url-quote-magic

# Follow GNU LS_COLORS
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# insert all expansions for expand completer
zstyle ':completion:*:expand:*' keep-prefix true tag-order all-expansions

# highlight parameters with uncommon names
zstyle ':completion:*:parameters' list-colors "=[^a-zA-Z]*=$color[red]"

# highlight aliases
zstyle ':completion:*:aliases' list-colors "=*=$color[green]"

# highlight the original input.
zstyle ':completion:*:original' list-colors "=*=$color[red];$color[bold]"

# highlight words like 'esac' or 'end'
zstyle ':completion:*:reserved-words' list-colors "=*=$color[red]"

# With commands like `rm' it's annoying if one gets offered the same filename
# again even if it is already on the command line. To avoid that:
zstyle ':completion:*:rm:*' ignore-line yes

# Manpages, ho!
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.(^1*)' insert-sections true

## add colors to processes for kill completion
zstyle ':completion:*:*:kill:*' verbose yes
zstyle ':completion:*:*:kill:*:processes' list-colors "=(#b) #([0-9]#) #([^ ]#)*=$color[cyan]=$color[yellow]=$color[green]"

# Make the nice with git completion and others
zstyle ':completion::*:(git|less|rm|vim|most)' ignore-line true

# Attempt to complete many parts at once
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# Ignore where we are when completing directory names
#zstyle ':completion:*' ignore-parents parent pwd directory

# Completion list settings
zstyle ':completion:*' format "${BG[232]}${FG[226]}Completing %d${reset_color}"
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' list-suffixes true
zstyle ':completion:*' menu select
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s

# Expansion options
zstyle ':completion:*' completer _complete _list _oldlist _expand _ignored _match _correct _approximate _prefix
zstyle ':completion:*' completer _complete _prefix
zstyle ':completion::prefix-1:*' completer _complete
zstyle ':completion:incremental:*' completer _complete _correct
zstyle ':completion:predict:*' completer _complete

# Completion caching
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "$ZSH_CACHE"

# Expand partial paths
zstyle ':completion:*' expand 'yes'
zstyle ':completion:*' squeeze-slashes 'yes'

# Insert as much as possible
zstyle ':completion:*:match:*' glob true
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:match:*' insert-unambiguous true

# Include non-hidden directories in globbed file completions
# for certain commands

zstyle ':completion::complete:*' '\'

# Use menuselection for pid completion
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:processes' command 'ps -au$USER'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;32'

#  tag-order 'globbed-files directories' all-files
zstyle ':completion::complete:*:tar:directories' file-patterns '*~.*(-/)'

# Don't complete backup files as executables
zstyle ':completion:*:complete:-command-::commands' ignored-patterns '*\~'

# formatting and messages
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format "- %{${fg[yellow]}%}%d%{${reset_color}%} -"
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' list-separator '#'
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*:prefix:*' add-space true

# Separate matches into groups
zstyle ':completion:*:matches' group 'yes'

## Describe each match group.
zstyle ':completion:*:descriptions' format "%B---- %d%b"

## Describe options in full
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'

# pasting with tabs doesn't perform completion
zstyle ':completion:*' insert-tab pending

compdef '_files -g "*.{pdf,ps,tiff,dvi}"' evince apvlv zathura
compdef '_files -g "*.{mkv,avi,wmv,mov,m4a,mpg,mpeg,mp4,part,mp3,ogg,ogv,flv,rm,vob}"' mplayer mn ml m xine vlc
compdef '_files -g "*.{jpeg,jpg,gif,png,tiff,raw}"' feh images gqview xv gthumb sxiv geeqie
compdef '_files -g "*.{z,gz,tgz}"' open zcat gunzip tar 7z 7za 7zr atool
compdef '_files -g "*.{bz2,tbz2}"' open bzcat tar bzip2 7z 7za 7zr atool
compdef '_files -g "*.{zip}"' open zip unzip 7z 7za 7zr atool
compdef '_files -g "*.{rar}"' open rar unrar 7z 7za 7zr atool
compdef '_files -g "*.{xz,txz,lzma}"' open unlzma lzma tar atool

zstyle ':completion:*' file-patterns \
    '%p:globbed-files: *(-/):directories:Directories' '*:all-files'

zstyle ':completion::*:git-{name-rev,add,rm}:*' ignore-line true

#compctl -g '*(-/)' + -g '.*(-/)' -v cd pushd rmdir dirs chdir

# Don't complete uninteresting users
zstyle ':completion:*:*:*:users' ignored-patterns \
        adm amanda apache avahi beaglidx bin cacti canna clamav daemon \
        dbus distcache dovecot fax ftp games gdm gkrellmd gopher \
        hacluster haldaemon halt hsqldb ident junkbust ldap lp mail \
        mailman mailnull mldonkey mysql nagios \
        named netdump news nfsnobody nobody nscd ntp nut nx openvpn \
        operator pcap postfix postgres privoxy pulse pvm quagga radvd \
        rpc rpcuser rpm shutdown squid sshd sync uucp vcsa xfs

function expand-or-complete-with-dots() {
  echo -n "\e[31m......\e[0m"
  zle expand-or-complete
  zle redisplay
}
zle -N expand-or-complete-with-dots
bindkey "^I" expand-or-complete-with-dots

# http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html
# http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins
# http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Standard-Widgets

# Make sure that the terminal is in application mode when zle is active, since
# only then values from $terminfo are valid
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
  function zle-line-init() {
    echoti smkx
  }
  function zle-line-finish() {
    echoti rmkx
  }
  zle -N zle-line-init
  zle -N zle-line-finish
fi

if [[ "${terminfo[kpp]}" != "" ]]; then
  bindkey "${terminfo[kpp]}" up-line-or-history       # [PageUp] - Up a line of history
fi
if [[ "${terminfo[knp]}" != "" ]]; then
  bindkey "${terminfo[knp]}" down-line-or-history     # [PageDown] - Down a line of history
fi

# start typing + [Up-Arrow] - fuzzy find history forward
if [[ "${terminfo[kcuu1]}" != "" ]]; then
  autoload -U up-line-or-beginning-search
  zle -N up-line-or-beginning-search
  bindkey "${terminfo[kcuu1]}" up-line-or-beginning-search
fi
# start typing + [Down-Arrow] - fuzzy find history backward
if [[ "${terminfo[kcud1]}" != "" ]]; then
  autoload -U down-line-or-beginning-search
  zle -N down-line-or-beginning-search
  bindkey "${terminfo[kcud1]}" down-line-or-beginning-search
fi

if [[ "${terminfo[khome]}" != "" ]]; then
  bindkey "${terminfo[khome]}" beginning-of-line      # [Home] - Go to beginning of line
fi
if [[ "${terminfo[kend]}" != "" ]]; then
  bindkey "${terminfo[kend]}"  end-of-line            # [End] - Go to end of line
fi

bindkey ' ' magic-space                               # [Space] - do history expansion

bindkey '^[f' forward-word                        # [Ctrl-RightArrow] - move forward one word
bindkey '^[b' backward-word                       # [Ctrl-LeftArrow] - move backward one word

if [[ "${terminfo[kcbt]}" != "" ]]; then
  bindkey "${terminfo[kcbt]}" reverse-menu-complete   # [Shift-Tab] - move through the completion menu backwards
fi

bindkey '^?' backward-delete-char                     # [Backspace] - delete backward
if [[ "${terminfo[kdch1]}" != "" ]]; then
  bindkey "${terminfo[kdch1]}" delete-char            # [Delete] - delete forward
else
  bindkey "^[[3~" delete-char
  bindkey "^[3;5~" delete-char
  bindkey "\e[3~" delete-char
fi

bindkey "^K" kill-line
bindkey "^U" backward-kill-line

# file rename magick
bindkey "^[m" copy-prev-shell-word

# load zsh-autosuggestions
#   https://github.com/zsh-users/zsh-autosuggestions
source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh
# load zsh-syntax-highlighting
#   https://github.com/zsh-users/zsh-syntax-highlighting
source $(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# -----------------------------------------------------------------------------
# /COMPLETION #
# -----------------------------------------------------------------------------
# Zsh start profiler
#
# unsetopt xtrace
# exec 2>&3 3>&-
# -----------------------------------------------------------------------------
